From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: "jvde.github" <jvde.github@gmail.com>
Date: Sat, 21 May 2022 17:12:40 +0200
Subject: [PATCH] open with file descriptor

file descriptor opening only for non-windows
---
 include/rtl-sdr.h |   4 +-
 src/librtlsdr.c   | 178 ++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 181 insertions(+), 1 deletion(-)

diff --git a/include/rtl-sdr.h b/include/rtl-sdr.h
index d64701e..4b7660e 100644
--- a/include/rtl-sdr.h
+++ b/include/rtl-sdr.h
@@ -61,7 +61,9 @@ RTLSDR_API int rtlsdr_get_device_usb_strings(uint32_t index,
 RTLSDR_API int rtlsdr_get_index_by_serial(const char *serial);
 
 RTLSDR_API int rtlsdr_open(rtlsdr_dev_t **dev, uint32_t index);
-
+#ifndef _WIN32
+RTLSDR_API int rtlsdr_open_file_descriptor(rtlsdr_dev_t** dev, int index);
+#endif
 RTLSDR_API int rtlsdr_close(rtlsdr_dev_t *dev);
 
 /* configuration functions */
diff --git a/src/librtlsdr.c b/src/librtlsdr.c
index 2bdda08..c7cba50 100644
--- a/src/librtlsdr.c
+++ b/src/librtlsdr.c
@@ -1663,6 +1663,184 @@ err:
 	return r;
 }
 
+#ifndef _WIN32
+int rtlsdr_open_file_descriptor(rtlsdr_dev_t** out_dev, int fd)
+{
+	int r;
+	rtlsdr_dev_t* dev = NULL;
+	uint8_t reg;
+
+	dev = calloc(1, sizeof(rtlsdr_dev_t));
+	if (NULL == dev) return -ENOMEM;
+
+	memcpy(dev->fir, fir_default, sizeof(fir_default));
+
+	/* adapted for direct opening of device */
+	r = libusb_set_option(dev->ctx, LIBUSB_OPTION_NO_DEVICE_DISCOVERY, NULL);
+	if (r != LIBUSB_SUCCESS) {
+		free(dev);
+		return -1;
+	}
+	r = libusb_init(&dev->ctx);
+	if (r != LIBUSB_SUCCESS) {
+		free(dev);
+		return -1;
+	}
+
+	dev->dev_lost = 1;
+	r = libusb_wrap_sys_device(dev->ctx, (intptr_t)fd, &dev->devh);
+	if (r != LIBUSB_SUCCESS) {
+		free(dev);
+		return -1;
+	}
+
+	/* verbatim copy */
+
+	if (libusb_kernel_driver_active(dev->devh, 0) == 1) {
+		dev->driver_active = 1;
+
+#ifdef DETACH_KERNEL_DRIVER
+		if (!libusb_detach_kernel_driver(dev->devh, 0)) {
+			fprintf(stderr, "Detached kernel driver\n");
+		}
+		else {
+			fprintf(stderr, "Detaching kernel driver failed!");
+			goto err;
+		}
+#else
+		fprintf(stderr, "\nKernel driver is active, or device is "
+			"claimed by second instance of librtlsdr."
+			"\nIn the first case, please either detach"
+			" or blacklist the kernel module\n"
+			"(dvb_usb_rtl28xxu), or enable automatic"
+			" detaching at compile time.\n\n");
+#endif
+	}
+
+	r = libusb_claim_interface(dev->devh, 0);
+	if (r < 0) {
+		fprintf(stderr, "usb_claim_interface error %d\n", r);
+		goto err;
+	}
+
+	dev->rtl_xtal = DEF_RTL_XTAL_FREQ;
+
+	/* perform a dummy write, if it fails, reset the device */
+	if (rtlsdr_write_reg(dev, USBB, USB_SYSCTL, 0x09, 1) < 0) {
+		fprintf(stderr, "Resetting device...\n");
+		libusb_reset_device(dev->devh);
+	}
+
+	rtlsdr_init_baseband(dev);
+	dev->dev_lost = 0;
+
+	/* Probe tuners */
+	rtlsdr_set_i2c_repeater(dev, 1);
+
+	reg = rtlsdr_i2c_read_reg(dev, E4K_I2C_ADDR, E4K_CHECK_ADDR);
+	if (reg == E4K_CHECK_VAL) {
+		fprintf(stderr, "Found Elonics E4000 tuner\n");
+		dev->tuner_type = RTLSDR_TUNER_E4000;
+		goto found;
+	}
+
+	reg = rtlsdr_i2c_read_reg(dev, FC0013_I2C_ADDR, FC0013_CHECK_ADDR);
+	if (reg == FC0013_CHECK_VAL) {
+		fprintf(stderr, "Found Fitipower FC0013 tuner\n");
+		dev->tuner_type = RTLSDR_TUNER_FC0013;
+		goto found;
+	}
+
+	reg = rtlsdr_i2c_read_reg(dev, R820T_I2C_ADDR, R82XX_CHECK_ADDR);
+	if (reg == R82XX_CHECK_VAL) {
+		fprintf(stderr, "Found Rafael Micro R820T tuner\n");
+		dev->tuner_type = RTLSDR_TUNER_R820T;
+		goto found;
+	}
+
+	reg = rtlsdr_i2c_read_reg(dev, R828D_I2C_ADDR, R82XX_CHECK_ADDR);
+	if (reg == R82XX_CHECK_VAL) {
+		fprintf(stderr, "Found Rafael Micro R828D tuner\n");
+		dev->tuner_type = RTLSDR_TUNER_R828D;
+		goto found;
+	}
+
+	/* initialise GPIOs */
+	rtlsdr_set_gpio_output(dev, 4);
+
+	/* reset tuner before probing */
+	rtlsdr_set_gpio_bit(dev, 4, 1);
+	rtlsdr_set_gpio_bit(dev, 4, 0);
+
+	reg = rtlsdr_i2c_read_reg(dev, FC2580_I2C_ADDR, FC2580_CHECK_ADDR);
+	if ((reg & 0x7f) == FC2580_CHECK_VAL) {
+		fprintf(stderr, "Found FCI 2580 tuner\n");
+		dev->tuner_type = RTLSDR_TUNER_FC2580;
+		goto found;
+	}
+
+	reg = rtlsdr_i2c_read_reg(dev, FC0012_I2C_ADDR, FC0012_CHECK_ADDR);
+	if (reg == FC0012_CHECK_VAL) {
+		fprintf(stderr, "Found Fitipower FC0012 tuner\n");
+		rtlsdr_set_gpio_output(dev, 6);
+		dev->tuner_type = RTLSDR_TUNER_FC0012;
+		goto found;
+	}
+
+found:
+	/* use the rtl clock value by default */
+	dev->tun_xtal = dev->rtl_xtal;
+	dev->tuner = &tuners[dev->tuner_type];
+
+	switch (dev->tuner_type) {
+	case RTLSDR_TUNER_R828D:
+		dev->tun_xtal = R828D_XTAL_FREQ;
+		/* fall-through */
+	case RTLSDR_TUNER_R820T:
+		/* disable Zero-IF mode */
+		rtlsdr_demod_write_reg(dev, 1, 0xb1, 0x1a, 1);
+
+		/* only enable In-phase ADC input */
+		rtlsdr_demod_write_reg(dev, 0, 0x08, 0x4d, 1);
+
+		/* the R82XX use 3.57 MHz IF for the DVB-T 6 MHz mode, and
+		 * 4.57 MHz for the 8 MHz mode */
+		rtlsdr_set_if_freq(dev, R82XX_IF_FREQ);
+
+		/* enable spectrum inversion */
+		rtlsdr_demod_write_reg(dev, 1, 0x15, 0x01, 1);
+		break;
+	case RTLSDR_TUNER_UNKNOWN:
+		fprintf(stderr, "No supported tuner found\n");
+		rtlsdr_set_direct_sampling(dev, 1);
+		break;
+	default:
+		break;
+	}
+
+	if (dev->tuner->init)
+		r = dev->tuner->init(dev);
+
+	rtlsdr_set_i2c_repeater(dev, 0);
+
+	*out_dev = dev;
+
+	return 0;
+err:
+	if (dev) {
+		if (dev->devh)
+			libusb_close(dev->devh);
+
+		if (dev->ctx)
+			libusb_exit(dev->ctx);
+
+		free(dev);
+	}
+
+	return r;
+}
+#endif
+
 int rtlsdr_close(rtlsdr_dev_t *dev)
 {
 	if (!dev)
-- 
2.40.0

